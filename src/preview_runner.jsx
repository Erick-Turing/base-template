// =====================
// WARNING:
// DO NOT EDIT THIS FILE
// =====================

import React, { useState, useEffect } from 'react';
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { FolderTree, File } from 'lucide-react';
import './index.css';

const Preview_Runner_Do_Not_Edit = () => {
  const [tasks, setTasks] = useState([]);
  const [currentTask, setCurrentTask] = useState(null);
  const [showHierarchy, setShowHierarchy] = useState(false);

  useEffect(() => {
    const importTasks = async () => {
      const taskModules = import.meta.glob('./tasks/**/*.jsx');
      const loadedTasks = [];

      for (const path in taskModules) {
        const module = await taskModules[path]();
        const pathParts = path.split('/');
        const taskId = pathParts[2];
        const fileName = pathParts.pop().split('.')[0];
        
        loadedTasks.push({
          id: taskId,
          name: fileName,
          component: module.default,
          fullPath: path
        });
      }

      setTasks(loadedTasks.sort((a, b) => a.fullPath.localeCompare(b.fullPath)));
      if (loadedTasks.length > 0) {
        setCurrentTask(loadedTasks[0]);
      }
    };

    importTasks();
  }, []);

  const FolderHierarchy = () => {
    const hierarchy = {};
    tasks.forEach(task => {
      const parts = task.fullPath.split('/');
      let current = hierarchy;
      parts.forEach((part, index) => {
        if (!current[part]) {
          current[part] = index === parts.length - 1 ? task : {};
        }
        current = current[part];
      });
    });

    const renderFolder = (folder, path = '') => {
      return (
        <ul className="pl-4">
          {Object.entries(folder).map(([name, content]) => (
            <li key={`${path}/${name}`} className="my-1">
              {typeof content === 'object' && !content.component ? (
                <>
                  <span className="flex items-center text-white">
                    <FolderTree size={16} className="mr-1" />
                    {name}
                  </span>
                  {renderFolder(content, `${path}/${name}`)}
                </>
              ) : (
                <span 
                  className="flex items-center cursor-pointer text-white hover:text-blue-300"
                  onClick={() => {
                    setCurrentTask(content);
                  }}
                >
                  <File size={16} className="mr-1" />
                  {name}
                </span>
              )}
            </li>
          ))}
        </ul>
      );
    };

    return renderFolder(hierarchy);
  };

  return (
    <div className="p-4 h-screen flex flex-col">
      <div className="flex-grow">
        {currentTask && (
          <div>
            <h2 className="text-xl font-semibold mb-4">{`Task ${currentTask.id}: ${currentTask.name}`}</h2>
            <currentTask.component />
          </div>
        )}
      </div>
      <button 
        onClick={() => setShowHierarchy(!showHierarchy)} 
        className="fixed bottom-4 left-4 px-4 py-2 bg-gray-500 text-white rounded z-10"
      >
        {showHierarchy ? 'Hide' : 'Show'} Hierarchy
      </button>
      {showHierarchy && (
        <div className="fixed bottom-16 left-4 p-4 bg-black bg-opacity-75 rounded max-h-[70vh] w-[300px] overflow-auto">
          <h3 className="text-lg font-semibold mb-2 text-white">Folder Hierarchy</h3>
          <FolderHierarchy />
        </div>
      )}
    </div>
  );
};

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <DynamicTaskImporter />
  </StrictMode>
);

export default Preview_Runner_Do_Not_Edit;